{"version":3,"sources":["StreetView.js","ParcelDetails.js","App.js","serviceWorker.js","index.js"],"names":["clientid","setBearing","node","mly","start","end","fullPano","nodeBearing","computedCA","center","desiredBearing","value","min","max","interval","wrap","bearingToBasic","bearing","setCenter","fetchImageKey","coords","lnglat","concat","console","log","url","fetch","then","r","json","markerStyle","ballColor","ballOpacity","color","opacity","interactive","radius","StreetView","_ref","_useState","useState","_useState2","Object","slicedToArray","mapillary","setMapillary","useEffect","d","lng","lat","mapillaryView","Mapillary","component","cover","marker","moveToKey","features","properties","key","geometry","coordinates","defaultMarker","SimpleMarker","lon","getComponent","add","react_default","a","createElement","id","ParcelDetails","props","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","streetAddress","ownerName","ownerAddress1","ownerAddress2","acres","PIN","zoning","src_StreetView","React","Component","App","_this","_onViewportChange","viewport","setState","_onClick","event","length","centroid","Acres","send_to_na","ownerstree","ownerCityS","Address","Zoning","state","latitude","longitude","zoom","pitch","width","window","innerWidth","height","innerHeight","settings","dragPan","scrollZoom","touchZoom","touchRotate","keyboard","doubleClickZoom","minZoom","maxZoom","minPitch","maxPitch","mapStyle","_this$state","esm","assign","onViewportChange","onClick","mapboxApiAccessToken","src_ParcelDetails","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a00174e.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\r\nimport * as Mapillary from \"mapillary-js\";\r\nimport bearing from \"@turf/bearing\";\r\nimport { connect } from \"net\";\r\n\r\nlet clientid = \"dkhrbnBqUXhCMm9lOUlOdHI3akc3dzpjMzYxYWJiNDZjNjAyOTM4\";\r\n\r\n/**\r\n * Wrap a value on the interval [min, max].\r\n */\r\nfunction wrap(value, min, max) {\r\n  var interval = max - min;\r\n\r\n  while (value > max || value < min) {\r\n    if (value > max) {\r\n      value = value - interval;\r\n    } else if (value < min) {\r\n      value = value + interval;\r\n    }\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\n/**\r\n * Convert a desired bearing to a basic X image coordinate for\r\n * a specific node bearing.\r\n *\r\n * Works only for a full 360 panorama.\r\n */\r\nfunction bearingToBasic(desiredBearing, nodeBearing) {\r\n  // 1. Take difference of desired bearing and node bearing in degrees.\r\n  // 2. Scale to basic coordinates.\r\n  // 3. Add 0.5 because node bearing corresponds to the center\r\n  //    of the image. See\r\n  //    https://mapillary.github.io/mapillary-js/classes/viewer.html\r\n  //    for explanation of the basic coordinate system of an image.\r\n  var basic = (desiredBearing - nodeBearing) / 360 + 0.5;\r\n\r\n  // Wrap to a valid basic coordinate (on the [0, 1] interval).\r\n  // Needed when difference between desired bearing and node\r\n  // bearing is more than 180 degrees.\r\n  return wrap(basic, 0, 1);\r\n}\r\n\r\n/**\r\n * Function to set the mapillary viewer's center by computing bearing\r\n */\r\nfunction setBearing(node, mly, start, end) {\r\n  if (!node.fullPano) {\r\n    // We are only interested in setting the bearing for full 360 panoramas.\r\n    return;\r\n  }\r\n  var nodeBearing = node.computedCA; // Computed node compass angle (equivalent\r\n  // to bearing) is used by mjs when placing\r\n  // the node in 3D space.\r\n\r\n  // compute this with @turf/bearing\r\n  var desiredBearing = bearing(start, end); // Your desired bearing.\r\n\r\n  var basicX = bearingToBasic(desiredBearing, nodeBearing);\r\n  var basicY = 0.6; // tilt slight down\r\n\r\n  var center = [basicX, basicY];\r\n\r\n  mly.setCenter(center);\r\n}\r\n\r\n/**\r\n * Promise-returning function to fetch a new Mapillary imageKey based on some coordinates\r\n */\r\nconst fetchImageKey = coords => {\r\n  let lnglat = `${coords[0][0][0]},${coords[0][0][1]}`;\r\n  console.log(lnglat)\r\n  let url = `https://a.mapillary.com/v3/images?client_id=${clientid}&closeto=${lnglat}&usernames=juancatothe`;\r\n  console.log(url)\r\n  return fetch(url).then(r => r.json());\r\n};\r\n\r\nlet markerStyle = {\r\n  ballColor: \"white\",\r\n  ballOpacity: 0.5,\r\n  color: \"yellow\",\r\n  opacity: 0.55,\r\n  interactive: false,\r\n  radius: 2\r\n};\r\n\r\nconst StreetView = ({ coords }) => {\r\n  let mapillaryView\r\n  // local state to store the mapillary viewer\r\n  const [mapillary, setMapillary] = useState(null)\r\n  \r\n  // initial useEffect: spin up a viewer\r\n  useEffect(() => {\r\n    console.log(coords)\r\n    fetchImageKey(coords)\r\n      .then(d => {\r\n        coords.lng = coords[0][0][0]\r\n        coords.lat = coords[0][0][1]\r\n        // make a new mapillary viewer\r\n        let mapillaryView = new Mapillary.Viewer(\"mly\", clientid, null, {\r\n          component: {\r\n            cover: false,\r\n            marker: true\r\n          }\r\n        });\r\n        // tell it to go to the image we we just got back from fetchImageKey\r\n        console.log(d)\r\n        mapillaryView.moveToKey(d.features[0].properties.key).then(node => {\r\n          setBearing(node, mapillaryView, d.features[0].geometry.coordinates, [\r\n            coords.lng,\r\n            coords.lat\r\n          ]);\r\n        });\r\n        setMapillary(mapillaryView)\r\n      })\r\n  }, [])\r\n\r\n  // when coords changes, fetch new image key based on coords\r\n  useEffect(() => {\r\n    if (mapillary) {\r\n      fetchImageKey(coords).then(d => {\r\n        mapillary.moveToKey(d.features[0].properties.key).then(node => {\r\n          setBearing(node, mapillary, d.features[0].geometry.coordinates, [\r\n            coords.lng,\r\n            coords.lat\r\n          ]);\r\n        });\r\n      })\r\n\r\n      let defaultMarker = new Mapillary.MarkerComponent.SimpleMarker(\r\n        \"default-id\",\r\n        { lat: coords.lat, lon: coords.lng },\r\n        markerStyle\r\n      );\r\n      let markerComponent = mapillary.getComponent(\"marker\");\r\n      markerComponent.add([defaultMarker]);\r\n    }\r\n\r\n    // mapillaryView = new Mapillary.Viewer(\"mly\", clientid, null, {\r\n    //   component: {\r\n    //     cover: false,\r\n    //     marker: true\r\n    //   }\r\n    // });\r\n\r\n    // mapillaryView.moveToKey(d.features[0].properties.key).then(node => {\r\n    //   setBearing(node, mapillaryView, d.features[0].geometry.coordinates, [\r\n    //     coords[0][0][0],\r\n    //     coords[0][0][1]\r\n    //   ]);\r\n    // });\r\n  }, [coords])\r\n\r\n  return (\r\n    <div id=\"mly\"></div>\r\n  )\r\n}\r\n\r\nexport default StreetView;","import React from 'react';\r\nimport StreetView from './StreetView';\r\n\r\nclass ParcelDetails extends React.Component{\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div id=\"parcel-details\">\r\n                <p>Street Address: {this.props.streetAddress}</p>\r\n                <p>Owner: {this.props.ownerName}</p>\r\n                <p>Owner Street: {this.props.ownerAddress1}</p>\r\n                <p>Owner City: {this.props.ownerAddress2}</p>\r\n                <p>Acres: {this.props.acres}</p>\r\n                <p>Parcel ID: {this.props.PIN}</p>\r\n                <p>Zoning: {this.props.zoning}</p>\r\n                {this.props.coords && <StreetView coords={this.props.coords}></StreetView>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ParcelDetails;","import React, { Component } from 'react';\r\n\r\nimport MapGL, { FlyToInterpolator } from 'react-map-gl';\r\n\r\nimport centroid from '@turf/centroid';\r\n\r\nimport './App.css';\r\nimport ParcelDetails from './ParcelDetails';\r\n\r\nconst MAPBOX_TOKEN = 'pk.eyJ1IjoianVhbmNhdG90aGUiLCJhIjoiY2p1MW9lYzdrMDN1MTN5cGVyYXVhMGw3NSJ9.8m02a0ot4-sQBBz7OfU0ng';\r\n\r\nclass App extends Component {\r\n  \r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      viewport: {\r\n        latitude: 43.336339,\r\n        longitude: -83.360,\r\n        zoom: 14,\r\n        bearing: 0,\r\n        pitch: 0,\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n      },\r\n      settings: {\r\n        dragPan: true,\r\n        scrollZoom: true,\r\n        touchZoom: true,\r\n        touchRotate: true,\r\n        keyboard: true,\r\n        doubleClickZoom: true,\r\n        minZoom: 11,\r\n        maxZoom: 19,\r\n        minPitch: 0,\r\n        maxPitch: 0\r\n      },\r\n      mapStyle: 'mapbox://styles/juancatothe/cjzxknl0j1u0x1cov0b2jw8mr',\r\n      acres: null,\r\n      ownerName: null,\r\n      ownerAddress1: null,\r\n      ownerAddress2: null,\r\n      PIN: null,\r\n      coords: null\r\n    }\r\n  }\r\n\r\n  _onViewportChange = viewport => this.setState({viewport});\r\n\r\n  _onClick = (event) => {\r\n    console.log(event);\r\n    if(event.features.length > 0) {\r\n      const center = centroid(event.features[0]).geometry.coordinates\r\n      //this.highlightParcel(event.features[0].properties.PIN)\r\n      //this.props.history.push(`/${event.features[0].properties.PIN}/`)\r\n      this.setState({\r\n        acres: event.features[0].properties.Acres,\r\n        ownerName: event.features[0].properties.send_to_na,\r\n        ownerAddress1: event.features[0].properties.ownerstree,\r\n        ownerAddress2: event.features[0].properties.ownerCityS,\r\n        PIN: event.features[0].properties.PIN,\r\n        streetAddress: event.features[0].properties.Address,\r\n        zoning: event.features[0].properties.Zoning,\r\n        coords: event.features[0].geometry.coordinates\r\n      });\r\n      //this.fetchData(event.features[0].properties.PIN)\r\n      //this._goToCoords({x:center[0], y:center[1]})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {viewport, settings, mapStyle} = this.state;\r\n    return (\r\n      <div>\r\n      <MapGL\r\n        {...viewport}\r\n        {...settings}\r\n        mapStyle={mapStyle}\r\n        onViewportChange={this._onViewportChange}\r\n        onClick={this._onClick}\r\n        mapboxApiAccessToken={MAPBOX_TOKEN} >\r\n      </MapGL>\r\n      <ParcelDetails\r\n        streetAddress={this.state.streetAddress}\r\n        acres={this.state.acres}\r\n        ownerName={this.state.ownerName}\r\n        ownerAddress1={this.state.ownerAddress1}\r\n        ownerAddress2={this.state.ownerAddress2}\r\n        PIN={this.state.PIN}\r\n        zoning={this.state.zoning}\r\n        coords={this.state.coords}\r\n      />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}